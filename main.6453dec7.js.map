{"version":3,"sources":["scripts/main.js"],"names":["inputs","document","querySelectorAll","label","createElement","item","placeholder","separate","name","toUpperCase","slice","htmlFor","id","textContent","className","before","cloneNode","nameAtribute","result","char","replace"],"mappings":";AAAA,aA2BC,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAzBD,IAyBC,EAzBKA,EAASC,SAASC,iBAAiB,SAEnCC,EAAQF,SAASG,cAAc,SAElBJ,EAAAA,EAAAA,GAqBlB,IArB0B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAhBK,IAAAA,EAAgB,EAAA,MACzBA,EAAKC,YAAcC,EAASF,EAAKG,MAAM,GAAGC,cACxCF,EAASF,EAAKG,MAAME,MAAM,GAE5BP,EAAMQ,QAAUN,EAAKO,GACrBT,EAAMU,YAAcN,EAASF,EAAKG,MAAMC,cACxCN,EAAMW,UAAY,cAElBT,EAAKU,OAAOZ,EAAMa,WAAU,KAa7B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAVD,SAAST,EAASU,GACZC,IAD0B,EAC1BA,EAASD,EAEMC,EAAAA,EAAAA,GAHW,IAGH,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAhBC,IAAAA,EAAgB,EAAA,MACrBA,EAAKV,gBAAkBU,IACzBD,EAASA,EAAOE,QAAQD,EAAUA,IAAAA,OAAAA,MALR,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IASvBD,OAAAA","file":"main.6453dec7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst inputs = document.querySelectorAll('input');\n\nconst label = document.createElement('label');\n\nfor (const item of inputs) {\n  item.placeholder = separate(item.name)[0].toUpperCase()\n  + separate(item.name).slice(1);\n\n  label.htmlFor = item.id;\n  label.textContent = separate(item.name).toUpperCase();\n  label.className = 'field-label';\n\n  item.before(label.cloneNode(true));\n}\n\nfunction separate(nameAtribute) {\n  let result = nameAtribute;\n\n  for (const char of result) {\n    if (char.toUpperCase() === char) {\n      result = result.replace(char, ` ${char}`);\n    }\n  }\n\n  return result;\n}\n"]}